def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def is_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True

    for col in range(3):
        if all(row[col] == player for row in board):
            return True

    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_draw(board):
    return all(cell != ' ' for row in board for cell in row)

def is_game_over(board):
    return is_winner(board, 'X') or is_winner(board, 'O') or is_draw(board)

def evaluate(board):
    if is_winner(board, 'X'):
        return 1
    if is_winner(board, 'O'):
        return -1
    return 0

def min_max_alpha_beta(board, depth, player, alpha, beta):
    if is_winner(board, 'X'):
        return -1
    if is_winner(board, 'O'):
        return 1
    if is_draw(board):
        return 0

    if player == 'O':
        max_eval = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = player
                    eval = min_max_alpha_beta(board, depth + 1, 'X', alpha, beta)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = player
                    eval = min_max_alpha_beta(board, depth + 1, 'O', alpha, beta)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def find_best_move(board, player):
    best_eval = -float('inf') if player == 'O' else float('inf')
    best_move = None

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = player
                eval = min_max_alpha_beta(board, 0, 'X' if player == 'O' else 'O', -float('inf'), float('inf'))
                board[i][j] = ' '
                if (player == 'O' and eval > best_eval) or (player == 'X' and eval < best_eval):
                    best_eval = eval
                    best_move = (i, j)

    return best_move

def play_tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    player = 'X'

    while not is_game_over(board):
        print_board(board)

        if player == 'X':
            i, j = find_best_move(board, player)
        else:
            while True:
                i = int(input("Enter row (0, 1, 2): "))
                j = int(input("Enter column (0, 1, 2): "))
                if board[i][j] == ' ':
                    break

        board[i][j] = player
        player = 'X' if player == 'O' else 'O'

    print_board(board)

    result = evaluate(board)
    if result == 1:
        print("X wins!")
    elif result == -1:
        print("O wins!")
    else:
        print("It's a draw!")

if __name__ == "__main__":
    play_tic_tac_toe()
